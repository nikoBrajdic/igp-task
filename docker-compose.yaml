services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka_network

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT_OUTSIDE}:${KAFKA_PORT_OUTSIDE}
      - ${KAFKA_PORT_INSIDE}:${KAFKA_PORT_INSIDE}
    networks:
      - kafka_network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_DOMAIN}:${KAFKA_PORT_OUTSIDE},PLAINTEXT_HOST://localhost:${KAFKA_PORT_INSIDE}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT_OUTSIDE},PLAINTEXT_HOST://0.0.0.0:${KAFKA_PORT_INSIDE}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS: "numbers:1:1,final-numbers:1:1"
    healthcheck:
      test: /bin/kafka-cluster cluster-id --bootstrap-server ${KAFKA_DOMAIN}:${KAFKA_PORT_OUTSIDE} || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  redis:
    image: redis/redis-stack
    restart: on-failure
    ports:
      - ${REDIS_SERVER_PORT}:${REDIS_SERVER_PORT}
      - ${REDIS_INSIGHT_PORT}:${REDIS_INSIGHT_PORT}
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_SERVER_PORT}
    networks:
      - kafka_network

  falcon:
    build: falcon_app/.
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_DOMAIN}:${KAFKA_PORT_OUTSIDE}
      KAFKA_TOPIC_1: ${KAFKA_TOPIC_1}
      KAFKA_GROUP_1: ${KAFKA_GROUP_1}
      KAFKA_TOPIC_2: ${KAFKA_TOPIC_2}
      KAFKA_GROUP_2: ${KAFKA_GROUP_2}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_SERVER_PORT}
      API_KEY: ${API_KEY}
      PYTHONUNBUFFERED: 1
    expose:
      - 8000
    networks:
      - kafka_network
    deploy:
      replicas: 3

  python-service:
    build: midservice/.
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_DOMAIN}:${KAFKA_PORT_OUTSIDE}
      KAFKA_TOPIC_1: ${KAFKA_TOPIC_1}
      KAFKA_GROUP_1: ${KAFKA_GROUP_1}
      KAFKA_TOPIC_2: ${KAFKA_TOPIC_2}
      KAFKA_GROUP_2: ${KAFKA_GROUP_2}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_SERVER_PORT}
      PYTHONUNBUFFERED: 1
    networks:
      - kafka_network
    deploy:
      replicas: 3

  nginx:
    image: nginx:latest
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - falcon
    networks:
      - kafka_network

networks:
  kafka_network:
    name: kafka_network
